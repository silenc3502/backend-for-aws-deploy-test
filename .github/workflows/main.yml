name: Deploy

on:
  repository_dispatch:
    types: [TEST_FINISH_TRIGGER]
      
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/backend-server
  VERSION: ${{ github.sha }}
  NAME: backend-server
      
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # https://github.com/actions/setup-java
          
      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Create application.yaml for CD Deploy
        run: |
          mkdir -p src/main/resources
          cd src/main/resources
          pwd
          echo "${{ secrets.CD_DEPLOY_CONFIG }}" > application.properties
          cat application.properties
            
      ## gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      ## Check jar
      - name: Check jar file
        run: |
          ls build
          ls build/libs
        
      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker buildx create --name arm64builder --use
            docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/silenc3502/backend-server:latest --push .
            docker logout

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-backend ]
    steps:
      - name: Get GitHub Actions IP
        id: ip
        uses: haythem/public-ip@v1.2
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            pwd
            ls -al
            cd actions-runner
            pwd
            if [[ "$(docker ps -q --filter ancestor=mysql:8.0)" ]]; then
              docker rm -f $(docker ps -qa --filter ancestor=mysql:8.0)
            fi
            echo "pass mysql-container"
            
            if [[ "$(docker ps -qa --filter ancestor=backend-deploy-test/backend-deploy-test-server:latest)" ]]; then
              docker rm -f $(docker ps -qa --filter ancestor=backend-deploy-test/backend-deploy-test-server:latest)
            fi
            echo "pass backend-deploy-test/backend-deploy-test-server:latest"
            
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            docker pull ghcr.io/silenc3502/backend-server:latest

            docker image prune -f
            docker logout
            
            docker-compose up -d

      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
