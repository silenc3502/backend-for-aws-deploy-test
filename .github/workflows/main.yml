name: Deploy

on:
  push:
    branches:
      - main
      
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/backend-server
  VERSION: ${{ github.sha }}
  NAME: backend-server
      
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }} # runner 설정에서 읽어들일거에요.
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: make application-prod.properties
        run: |
            cd ./src/main/resources
            touch ./application-prod.properties
            echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
        shell: bash
            
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-backend ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ env.DOCKER_IMAGE }}:latest
            docker-compose up -d
            docker image prune -f
      
